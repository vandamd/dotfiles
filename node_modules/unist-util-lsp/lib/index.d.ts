/**
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} UnistPosition
 * @typedef {import('vscode-languageserver-types').Position} LspPosition
 * @typedef {import('vscode-languageserver-types').Range} Range
 */
/**
 * Convert a unist point or position to an LSP range.
 *
 * @param {Readonly<UnistPosition> | Readonly<Point>} place
 *   The unist point or position to convert.
 * @returns {Range}
 *   The LSP range.
 */
export function fromPlace(place: Readonly<UnistPosition> | Readonly<Point>): Range;
/**
 * Turn a unist point into an LSP position.
 *
 * @param {Readonly<Point>} point
 *   The unist point to convert.
 * @returns {LspPosition}
 *   The LSP position.
 */
export function fromPoint(point: Readonly<Point>): LspPosition;
/**
 * Convert an LSP position to a unist point.
 *
 * @param {Readonly<LspPosition>} lspPosition
 *   The LSP position to convert.
 * @returns {Point}
 *   The unist point.
 */
export function toPoint(lspPosition: Readonly<LspPosition>): Point;
/**
 * Convert a unist position to an LSP range.
 *
 * @param {Readonly<UnistPosition>} unistPosition
 *   The unist position to convert.
 * @returns {Range}
 *   The LSP range.
 */
export function fromPosition(unistPosition: Readonly<UnistPosition>): Range;
/**
 * Convert an LSP range to a unist position.
 *
 * @param {Readonly<Range>} range
 *   The LSP range to convert.
 * @returns {UnistPosition}
 *   The range converted to a unist position.
 */
export function toPosition(range: Readonly<Range>): UnistPosition;
export type Point = import('unist').Point;
export type UnistPosition = import('unist').Position;
export type LspPosition = import('vscode-languageserver-types').Position;
export type Range = import('vscode-languageserver-types').Range;
