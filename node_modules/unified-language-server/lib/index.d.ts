/**
 * Create a language server for a unified ecosystem.
 *
 * @param {Options} options
 *   Configuration for `unified-engine` and the language server.
 */
export function createUnifiedLanguageServer({ configurationSection, ignoreName, packageField, pluginPrefix, plugins, processorName, processorSpecifier, defaultProcessor, rcName }: Options): void;
export type VFileMessage = import('vfile-message').VFileMessage;
export type EngineOptions = import('unified-engine').Options;
export type EngineFields = Pick<EngineOptions, 'ignoreName' | 'packageField' | 'pluginPrefix' | 'plugins' | 'rcName'>;
export type LanguageServerFields = {
    /**
     * The package ID of the expected processor (example: `'remark'`).
     * Will be loaded from the local workspace.
     */
    processorName: string;
    /**
     * The specifier to get the processor on the resolved module.
     * For example, remark uses the specifier `remark` to expose its processor and
     * a default export can be requested by passing `'default'` (the default).
     */
    processorSpecifier?: string | undefined;
    /**
     * Optional fallback processor to use if `processorName` can’t be found
     * locally in `node_modules`.
     * This can be used to ship a processor with your package, to be used if no
     * processor is found locally.
     * If this isn’t passed, a warning is shown if `processorName` can’t be found.
     */
    defaultProcessor?: (() => import("unified").Processor<any, any, any, any, any>) | undefined;
    /**
     * This option will be used to give the client a hint of which configuration
     * section to use.
     * For example VSCode extensions use this to pick only settings that use this
     * as a prefix in order to prevent conflicts and reduce the amount of data
     * sent to the language server.
     */
    configurationSection: string;
};
export type Options = EngineFields & LanguageServerFields;
export type UnifiedLanguageServerSettings = {
    /**
     * If true, files will only be checked if a configuration file is present.
     */
    requireConfig?: boolean | undefined;
};
